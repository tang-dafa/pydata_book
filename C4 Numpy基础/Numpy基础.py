"""
    时间：2019/9/28
    作者：大发
    内容：第四章笔记
"""

##  多维数组对象 ndarray
# 举例
# import numpy as np
# data = np.random.randn(2,3)    ##随机生成一个2行3列的数组
# data
# Out[4]:
# array([[-0.45836124,  0.17933601,  1.54540214],
#        [-0.2749558 , -0.75488606,  2.26010595]])
# data * 10
# Out[5]:
# array([[-4.58361244,  1.79336006, 15.45402139],
#        [-2.74955802, -7.54886056, 22.60105947]])
# data + data
# Out[6]:
# array([[-0.91672249,  0.35867201,  3.09080428],
#        [-0.5499116 , -1.50977211,  4.52021189]])
# data.shape                          ##shape属性，表征数组每一维度的数量
# Out[7]: (2, 3)
# data.dtype                         ##数组的数据类型
# Out[8]: dtype('float64')

#####  生成数组ndarray
#### array函数
##列表转数组
# data1 = [6,7.5,8,9,1,0]
# arr1 = np.array(data1)
# arr1
# Out[11]: array([6. , 7.5, 8. , 9. , 1. , 0. ])
## 等长度列表转换数组
# data2 =[[1,2,3,4],[5,6,7,8]]
# arr2 = np.array(data2)
# arr2
# Out[14]:
# array([[1, 2, 3, 4],
#        [5, 6, 7, 8]])
##  .ndim 和 .shape 方法来检查数组的属性，几行几列之类的
# arr2.ndim
# Out[15]: 2
# arr2.shape
# Out[16]: (2, 4)
# arr2.dtype              ##二维数组的类型
# Out[17]: dtype('int32')
##  np.zeros 创建全0数组
# np.zeros((4,6))
# Out[18]:
# array([[0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0.]])
##  np.empty  创建空数组
# np.empty((2,3,2))
# Out[19]:
# array([[[8.85721800e-303, 0.00000000e+000],
#         [0.00000000e+000, 0.00000000e+000],
#         [0.00000000e+000, 0.00000000e+000]],
#        [[9.93429802e-315, 0.00000000e+000],
#         [0.00000000e+000, 0.00000000e+000],
#         [0.00000000e+000, 0.00000000e+000]]])
## np.ones 创建全1数组
# np.ones((2,3))
# Out[20]:
# array([[1., 1., 1.],
#        [1., 1., 1.]])
##  用astype转换数组的数据类型
# arr = np.array([1,2,3,4,5])
# arr.dtype
# Out[22]: dtype('int32')
# float_arr = arr.astype(np.float64)
# float_arr.dtype
# Out[24]: dtype('float64')
# arr = np.array([3.45 , 2.45 , 0.12 , 6.23 , 9.34])
# arr
# Out[26]: array([3.45, 2.45, 0.12, 6.23, 9.34])
# arr.astype(np.int32)       ##转为整数形式，去掉了小数
# Out[27]: array([3, 2, 0, 6, 9])
# numeric_strings = np.array(['1.67', '7.98', '1.78'],dtype=np.string_)
# numeric_strings.astype(float)         ## 把数组中的字符串转换成了浮点数
# Out[29]: array([1.67, 7.98, 1.78])

##
# arr = np.arange(10)
# arr
# Out[46]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# arr[5]
# Out[47]: 5
# arr[5:8]
# Out[48]: array([5, 6, 7])
# arr[5:8]=12                                ##数组的切片修改是反应在原数组上的
# arr
# Out[50]: array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])
###  切片后赋值， 还是会改变原数组
# arr_slice = arr[5:8]
# arr_slice
# Out[52]: array([12, 12, 12])
# arr_slice[1] = 123
# arr
# Out[54]: array([  0,   1,   2,   3,   4,  12, 123,  12,   8,   9])
# arr_slice[:] = 34
# arr
# Out[56]: array([ 0,  1,  2,  3,  4, 34, 34, 34,  8,  9])

# arr[3:6].copy()             ## 复制切片为一个新数组，必须显式的复制
# Out[57]: array([ 3,  4, 34])

##二维数组切片
# arr2d = np.array([[1,2,3],[4,5,6],[7,8,9]])
# arr2d[2]
# Out[59]: array([7, 8, 9])
# arr2d[0][2]
# Out[60]: 3
# arr2d[0,2]
# Out[61]: 3

### 多组切片
# arr2d
# Out[62]:
# array([[1, 2, 3],
#        [4, 5, 6],
#        [7, 8, 9]])
# arr2d[:2]
# Out[63]:
# array([[1, 2, 3],
#        [4, 5, 6]])
# arr2d[:2 , 1:]
# Out[64]:
# array([[2, 3],
#        [5, 6]])
# arr2d[:, :1]     # :是选整个轴
# Out[65]:
# array([[1],
#        [4],
#        [7]])
# arr2d[:2 , :1] = 0     ##对切片表达式赋值，原数组也会被改变
# arr2d
# Out[67]:
# array([[0, 2, 3],
#        [0, 5, 6],
#        [7, 8, 9]])



### 4.1.5 布尔索引
#
# names = np.array(['Bob', 'Joe', 'will','Bob', 'Joe', 'will',  'Joe'])
# datas = np.random.randn(7 ,4 )          ##生成一些随机正态分布的数组
# names
# Out[72]: array(['Bob', 'Joe', 'will', 'Bob', 'Joe', 'will', 'Joe'], dtype='<U4')
# datas
# Out[73]:
# array([[-0.74266733,  0.57676096,  1.43521599,  1.57870048],
#        [-0.2512481 ,  0.07896169,  1.53365284, -1.01692689],
#        [ 0.08060277, -0.18105248, -0.9189872 ,  1.88650538],
#        [ 1.05241023,  0.88998985, -0.31910636,  1.90484276],
#        [-0.91760373,  1.2652827 ,  0.0768802 , -1.60334351],
#        [-0.15200525, -0.61385167,  0.17890589,  0.26510868],
#        [-1.53873404, -0.67310583,  0.99245204, -0.75507573]])
# names == 'Bob'
# Out[74]: array([ True, False, False,  True, False, False, False])
# datas[names == 'Bob']                             ##索引数组可以传入布尔值数组
# Out[76]:
# array([[-0.74266733,  0.57676096,  1.43521599,  1.57870048],
#        [ 1.05241023,  0.88998985, -0.31910636,  1.90484276]])

# datas[names == 'Bob' , 2:]
# Out[77]:
# array([[ 1.43521599,  1.57870048],
#        [-0.31910636,  1.90484276]])
# datas [names == 'Bob', 3]
# Out[78]: array([1.57870048, 1.90484276])
# names != 'Bob'                 ## ！取反
# Out[79]: array([False,  True,  True, False,  True,  True,  True])
# datas[~(names == 'Bob')]        ##  ~ 取反
# Out[80]:
# array([[-0.2512481 ,  0.07896169,  1.53365284, -1.01692689],
#        [ 0.08060277, -0.18105248, -0.9189872 ,  1.88650538],
#        [-0.91760373,  1.2652827 ,  0.0768802 , -1.60334351],
#        [-0.15200525, -0.61385167,  0.17890589,  0.26510868],
#        [-1.53873404, -0.67310583,  0.99245204, -0.75507573]])

# cond = names == 'Bob'
# datas[~cond]
# Out[82]:
# array([[-0.2512481 ,  0.07896169,  1.53365284, -1.01692689],
#        [ 0.08060277, -0.18105248, -0.9189872 ,  1.88650538],
#        [-0.91760373,  1.2652827 ,  0.0768802 , -1.60334351],
#        [-0.15200525, -0.61385167,  0.17890589,  0.26510868],
#        [-1.53873404, -0.67310583,  0.99245204, -0.75507573]])

# mask = (names == 'Bob') |(names == 'Will')           ##  |  取联合 or的意思
# mask
# Out[84]: array([ True, False, False,  True, False, False, False])
# datas[mask]
# Out[85]:
# array([[-0.74266733,  0.57676096,  1.43521599,  1.57870048],
#        [ 1.05241023,  0.88998985, -0.31910636,  1.90484276]])


### 神奇索引
# arr = np.empty((8,4))
# for i in range(8):
#     arr[i] = i
# arr
# Out[87]:
# array([[0., 0., 0., 0.],
#        [1., 1., 1., 1.],
#        [2., 2., 2., 2.],
#        [3., 3., 3., 3.],
#        [4., 4., 4., 4.],
#        [5., 5., 5., 5.],
#        [6., 6., 6., 6.],
#        [7., 7., 7., 7.]])
# arr[[3,1,5,2]]     ### 按指定顺序切片
# Out[89]:
# array([[3., 3., 3., 3.],
#        [1., 1., 1., 1.],
#        [5., 5., 5., 5.],
#        [2., 2., 2., 2.]])
# arr[[-1,-5,-3]]
# Out[90]:
# array([[7., 7., 7., 7.],
#        [3., 3., 3., 3.],
#        [5., 5., 5., 5.]])

# arr = np.arange(32).reshape((8,4))
# arr
# Out[92]:
# array([[ 0,  1,  2,  3],
#        [ 4,  5,  6,  7],
#        [ 8,  9, 10, 11],
#        [12, 13, 14, 15],
#        [16, 17, 18, 19],
#        [20, 21, 22, 23],
#        [24, 25, 26, 27],
#        [28, 29, 30, 31]])
# arr[[1,5,7,2], [0,3,1,2]]
# Out[93]: array([ 4, 23, 29, 10])



### 4.1.7 数组转置和换轴

# arr = np.arange(15).reshape((3,5))
# arr
# Out[95]:
# array([[ 0,  1,  2,  3,  4],
#        [ 5,  6,  7,  8,  9],
#        [10, 11, 12, 13, 14]])
# arr.T               ##  转置
# Out[96]:
# array([[ 0,  5, 10],
#        [ 1,  6, 11],
#        [ 2,  7, 12],
#        [ 3,  8, 13],
#        [ 4,  9, 14]])

##  np.dot 可以用来算矩阵内积
# arr  = np.random.randn(6,3)
# arr
# Out[98]:
# array([[ 1.12232731,  0.15869019,  0.24342647],
#        [-0.30063144,  1.42959325, -0.12665772],
#        [-0.50386045,  1.22615907, -0.93807986],
#        [-0.52592732,  1.3614557 , -1.02672384],
#        [ 0.37183613, -0.35201706, -0.47319563],
#        [ 0.14710546, -0.0270466 ,  0.63006069]])
# np.dot(arr.T , arr )
# Out[99]:
# array([[ 2.04037487, -1.72038951,  1.24065905],
#        [-1.72038951,  5.55059467, -2.54098183],
#        [ 1.24065905, -2.54098183,  2.63034486]])


# arr = np.arange(16).reshape((2,2,4))
# arr
# Out[101]:
# array([[[ 0,  1,  2,  3],
#         [ 4,  5,  6,  7]],
#        [[ 8,  9, 10, 11],
#         [12, 13, 14, 15]]])
# arr.transpose((1,0,2))                ## 用轴编号置换轴
# Out[102]:
# array([[[ 0,  1,  2,  3],
#         [ 8,  9, 10, 11]],
#        [[ 4,  5,  6,  7],
#         [12, 13, 14, 15]]])

# arr
# Out[103]:
# array([[[ 0,  1,  2,  3],
#         [ 4,  5,  6,  7]],
#        [[ 8,  9, 10, 11],
#         [12, 13, 14, 15]]])
# arr.swapaxes(1,2)                    ### 接受一对轴编号对轴进行调整
# Out[104]:
# array([[[ 0,  4],
#         [ 1,  5],
#         [ 2,  6],
#         [ 3,  7]],
#        [[ 8, 12],
#         [ 9, 13],
#         [10, 14],
#         [11, 15]]])





"""
    时间：2019/9/28
    作者：大发
    内容：第四章笔记
"""



# arr = np.arange(10)
# arr
# Out[110]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# np.sqrt(arr)                ## 开方
# Out[111]:
# array([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,
#        2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])
# np.exp(arr)                 ##  e值
# Out[112]:
# array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,
#        5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,
#        2.98095799e+03, 8.10308393e+03])

### 一元通用函数，还有很多别的
# x = np.random.randn(8)
# y = np.random.randn(8)
# x
# Out[115]:
# array([-0.54067591,  0.02089548, -1.4820829 ,  0.31132739,  1.94152594,
#         0.33864859, -1.31967805, -1.09185167])
# y
# Out[116]:
# array([-0.53408297, -0.49514272, -1.25898225,  0.12937122, -1.05961824,
#         0.16894477,  0.48661879,  2.09679859])
# np.maximum(x,y)
# Out[117]:
# array([-0.53408297,  0.02089548, -1.25898225,  0.31132739,  1.94152594,
#         0.33864859,  0.48661879,  2.09679859])
# np.add(x,y)
# Out[118]:
# array([-1.07475889, -0.47424725, -2.74106514,  0.44069862,  0.8819077 ,
#         0.50759335, -0.83305925,  1.00494692])



# arr = np.random.randn(7) * 5
# arr
# Out[120]:
# array([-3.75221003, -7.77346524, -7.92649537, -4.41654228,  5.4162581 ,
#         0.17495267,  7.88013595])
# remainder , whole_part = np.modf(arr)            ##  将数组分成了小数和整数两部分
# remainder
# Out[122]:
# array([-0.75221003, -0.77346524, -0.92649537, -0.41654228,  0.4162581 ,
#         0.17495267,  0.88013595])
# whole_part
# Out[123]: array([-3., -7., -7., -4.,  5.,  0.,  7.])


##### 4.3 使用数组面向数组编程

# points = np.arange(-5 ,5, 0.01)
# xs, ys = np.meshgrid(points, points)
# ys
# Out[126]:
# array([[-5.  , -5.  , -5.  , ..., -5.  , -5.  , -5.  ],
#        [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99],
#        [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98],
#        ...,
#        [ 4.97,  4.97,  4.97, ...,  4.97,  4.97,  4.97],
#        [ 4.98,  4.98,  4.98, ...,  4.98,  4.98,  4.98],
#        [ 4.99,  4.99,  4.99, ...,  4.99,  4.99,  4.99]])
# z = np.sqrt(xs**2 + ys**2)
# z
# Out[128]:
# array([[7.07106781, 7.06400028, 7.05693985, ..., 7.04988652, 7.05693985,
#         7.06400028],
#        [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
#         7.05692568],
#        [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
#         7.04985815],
#        ...,
#        [7.04988652, 7.04279774, 7.03571603, ..., 7.0286414 , 7.03571603,
#         7.04279774],
#        [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
#         7.04985815],
#        [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
#         7.05692568]])
# import matplotlib.pyplot as plt                ## 生成一个图像，二维数组可视化
# Backend Qt5Agg is interactive backend. Turning interactive mode on.
# plt.imshow(z , cmap=plt.cm.gray) ; plt.colorbar()
# Out[130]: <matplotlib.colorbar.Colorbar at 0xf002c30>
# plt.title("Image plot of $\sqrt{x^2 + y^2}$ for a grid of vaules")
# Out[131]: Text(0.5, 1.0, 'Image plot of $\\sqrt{x^2 + y^2}$ for a grid of vaules')

## 条件逻辑和数组操作

## 用np.where 来实现为True时，选x里的数，为FALSE时，选y里的数
# xarr = np.array([1,3,5,6,7])
# yarr = np.array([0,4,8,5,2])
# cond = np.array([True,False,True,True,False])
# result = np.where(cond , xarr , yarr )
# result
# Out[137]: array([1, 4, 5, 6, 2])

### 用np.where 来生成一个新的数组
# arr = np.random.randn(4,4)
# arr
# Out[139]:
# array([[-0.29929245, -0.12017683,  0.95366857, -0.91810685],
#        [ 1.7942299 ,  0.86473212,  0.50830919,  0.44628164],
#        [-0.07327965, -0.12355141,  0.39610259,  1.44548462],
#        [-0.94725364, -0.44179963, -1.97665669, -0.82955874]])
# arr>0
# Out[140]:
# array([[False, False,  True, False],
#        [ True,  True,  True,  True],
#        [False, False,  True,  True],
#        [False, False, False, False]])
# np.where(arr>0 , 2, -2)                ##正值设为2，负值设为-2
# Out[141]:
# array([[-2, -2,  2, -2],
#        [ 2,  2,  2,  2],
#        [-2, -2,  2,  2],
#        [-2, -2, -2, -2]])
# np.where(arr>0 , 2 , arr)        ###仅将正值设为2， 其他的不变
# Out[142]:
# array([[-0.29929245, -0.12017683,  2.        , -0.91810685],
#        [ 2.        ,  2.        ,  2.        ,  2.        ],
#        [-0.07327965, -0.12355141,  2.        ,  2.        ],
#        [-0.94725364, -0.44179963, -1.97665669, -0.82955874]])

###聚合函数

# arr = np.random.randn(5,4)
# arr
# Out[144]:
# array([[ 0.8368561 ,  0.84874088, -0.3643369 , -0.49018176],
#        [-2.50903665, -3.09836548, -0.38347382, -1.29782311],
#        [ 0.07360351,  1.23535968,  0.17405899, -0.23369198],
#        [-0.93963198,  0.42755838, -1.78403344,  0.00321882],
#        [-0.39056185,  0.14442604,  1.01110008, -1.98736122]])
# arr.mean()                                ###取平均数
# Out[145]: -0.4361787849536894
# np.mean(arr)
# Out[146]: -0.4361787849536894
# arr.sum()                                   ## 取和
# Out[147]: -8.723575699073788
# arr.mean(axis = 1)                           ## 取轴平均
# Out[148]: array([ 0.20776958, -1.82217476,  0.31233255, -0.57322206, -0.30559924])
# arr.mean(axis = 0)
# Out[149]: array([-0.58575417, -0.0884561 , -0.26933702, -0.80116785])


# arr = np.arange(8)
# arr
# Out[156]: array([0, 1, 2, 3, 4, 5, 6, 7])
# arr.cumsum()                                   ### 聚合 ，累加
# Out[157]: array([ 0,  1,  3,  6, 10, 15, 21, 28], dtype=int32)
# arr = np.arange(9).reshape((3,3))
# arr
# Out[159]:
# array([[0, 1, 2],
#        [3, 4, 5],
#        [6, 7, 8]])
# arr.cumsum(axis = 0 )            ##  轴方向上累加
# Out[160]:
# array([[ 0,  1,  2],
#        [ 3,  5,  7],
#        [ 9, 12, 15]], dtype=int32)
# arr.cumprod(axis = 1)          ## 轴方向上，累乘
# Out[161]:
# array([[  0,   0,   0],
#        [  3,  12,  60],
#        [  6,  42, 336]], dtype=int32)


##  布尔值数组的方法
# arr = np.random.randn(100)
# (arr > 0).sum()               # 正值的个数
# Out[163]: 53

# bools = np.array([False , False , True , False])
# bools.any()                                    #  .any 检查是否有一个TRUE
# Out[165]: True
# bools.all()                                     #  .all 检查是否全是True
# Out[166]: False

#### 4.5 线性代数

# x = np.array([[1,2,3],[4,5,6]])
# y = np.array([[6,23],[-1,7],[8,9]])
# x
# Out[4]:
# array([[1, 2, 3],
#        [4, 5, 6]])
# y
# Out[5]:
# array([[ 6, 23],
#        [-1,  7],
#        [ 8,  9]])
# x.dot(y)      ##  = np.dot(x,y)
# Out[6]:
# array([[ 28,  64],
#        [ 67, 181]])

## 4.6 伪随机数生成
# from random import normalvariate
# N = 1000000
# %timeit samples = [normalvariate(0,1) for _ in range(N)]
# 1.18 s ± 124 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)   ## 这几句我不理解什么意思
# %timeit np.random.normal(size=N)
# 38.1 ms ± 690 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)  ##  这几句我不理解什么意思
##  以上就是生成的伪随机数

# np.random.seed(1234)   ## 用来更改Numpy的随机数种子
### numpy.random中的数据生成函数公用了一个全局的随机数种子
## np.random.RandomState 生成一个随机数生成器， 可以避免全局状态，独立于其它的随机数状态


















